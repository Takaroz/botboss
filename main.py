import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from myServer import server_on

# ---------- CONFIG ----------
TOKEN = os.getenv('TOKEN')  # <-- ‡πÉ‡∏™‡πà Token ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
DB_PATH = "bosses.db"
CHANNEL_ID = 1375815326658461736  # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô channel id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# ---------- BOT SETUP ----------
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)
intents.message_content = True
#bot = commands.Bot(command_prefix="/", intents=intents)

# ---------- AUTOCOMPLETE ----------
async def boss_name_autocomplete(interaction: discord.Interaction, current: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM bosses WHERE name LIKE ?", (f"%{current}%",))
        names = [row[0] for row in await cursor.fetchall()]
    return [app_commands.Choice(name=name, value=name) for name in names]

# ---------- ON READY ----------
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Logged in as {bot.user}")
    check_spawn_notifications.start()

# ---------- CREATE TABLE ----------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS bosses (
                no INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,         -- name_en
                name_th TEXT DEFAULT '-',   -- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                period TEXT NOT NULL,
                next_spawn TEXT,
                locate TEXT DEFAULT '-',
                occ TEXT DEFAULT '-'
            )
        """)
        # await db.executemany("""
        #     INSERT INTO bosses (name, locate, period, next_spawn) VALUES (?, ?, ?, ?)
        # """, [
        #     ("‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏ó‡∏π‡∏ö‡∏≤", None, "06:00", "2025-05-31 14:14"),
        #     ("‡πÄ‡∏Ñ‡∏•‡∏ã‡∏≠‡∏™", None, "10:00", None),
        #     ("‡∏ö‡∏≤‡∏ã‡∏¥‡∏•‡∏≤", None, "04:00", "2025-05-31 09:47"),
        #     ("‡πÄ‡∏ü‡∏•‡∏¥‡∏™", None, "03:00", "2025-05-31 09:40"),
        #     ("‡∏ó‡∏≤‡∏•‡∏≤‡∏Ñ‡∏¥‡∏ô", None, "10:00", "2025-05-31 15:02"),
        #     ("‡∏û‡∏±‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏î‡πå", None, "12:00", "2025-05-31 09:31"),
        #     ("‡∏ã‡∏≤‡∏£‡πå‡∏Å‡πâ‡∏≤", None, "10:00", "2025-05-31 09:13"),
        #     ("‡∏ó‡∏¥‡∏°‡∏¥‡∏ó‡∏£‡∏¥‡∏™", None, "08:00", "2025-05-31 13:04"),
        #     ("‡∏™‡∏ï‡∏±‡∏ô", None, "07:00", "2025-05-31 12:41"),
        #     ("‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô", None, "08:00", "2025-05-31 11:32"),
        #     ("‡∏û‡∏±‡∏ô‡∏ô‡∏≤‡πÇ‡∏£‡∏î", None, "10:00", "2025-05-31 13:19"),
        #     ("‡πÄ‡∏°‡∏î‡∏π‡∏ã‡πà‡∏≤", None, "10:00", "2025-05-31 14:38"),
        #     ("‡πÄ‡∏ö‡∏£‡∏Å‡πâ‡∏≤", None, "06:00", "2025-05-31 14:34"),
        #     ("‡∏°‡∏≤‡∏ó‡∏π‡∏£‡∏≤", None, "06:00", "2025-05-31 12:18"),
        #     ("‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡∏•‡∏¥‡∏•‡∏•‡∏µ‡πà", None, "12:00", "2025-05-31 09:27"),
        #     ("‡πÄ‡∏ö‡∏Æ‡∏µ‡∏°‡∏≠‡∏ò", None, "09:00", "2025-05-31 10:50"),
        #     ("‡∏ã‡∏≤‡∏ö‡∏±‡∏ô", "‡∏°‡∏î‡∏ä‡∏±‡πâ‡∏ô2", "12:00", None),
        #     ("‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ‡∏°‡∏î", "‡∏°‡∏î‡∏ä‡∏±‡πâ‡∏ô3", "06:00", "2025-05-31 09:24"),
        #     ("‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 3", "08:00", "2025-05-31 15:51"),
        #     ("‡∏Ñ‡∏≤‡∏ó‡∏≤‡∏ô", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 6", "10:00", "2025-05-31 16:57"),
        #     ("‡∏Ñ‡∏≠‡∏£‡πå‡∏ã‡∏±‡∏™", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 7", "10:00", "2025-05-31 15:02"),
        # ])
        await db.commit()

@bot.event
async def on_message(message: discord.Message):
    # ‡∏≠‡∏¢‡πà‡∏≤‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ï‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
    if message.author.bot:
        return

    content = message.content.strip()  # ‡∏ï‡∏±‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á/‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏≥‡∏ó‡πâ‡∏≤‡∏¢
    if content.lower().startswith("!importbosses"):
        tz = ZoneInfo("Asia/Bangkok")
        lines_raw = content.splitlines()[1:]  # ‡∏ï‡∏±‡∏î‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏á
        lines = [ln for ln in lines_raw if ln.strip()]

        inserted, updated = 0, 0
        current_date = datetime.now(tz).date()
        last_time = None  # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô

        async with aiosqlite.connect(DB_PATH) as db:
            for line in lines:
                parts = [p.strip() for p in line.split(",")]

                # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: no, name, locate, ???, next_time, period, [occ]
                if len(parts) < 6:
                    print(f"‚ö†Ô∏è ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ç‡∏≤‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå: {line!r}")
                    continue

                # mapping field (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                # parts: 0=no, 1=name, 2=locate, 3=ignored?, 4=next_time, 5=period, 6=occ(optional)
                name = parts[1]
                name_th = parts[2].strip()
                next_time_str = parts[4]
                period_str = parts[5]
                occ = parts[6] if len(parts) > 6 and parts[6] else "-"

                # parse ‡πÄ‡∏ß‡∏•‡∏≤‡∏ü‡∏∑‡πâ‡∏ô
                spawn_time_obj = None
                for fmt in ("%H:%M:%S", "%H:%M"):
                    try:
                        spawn_time_obj = datetime.strptime(next_time_str, fmt).time()
                        break
                    except ValueError:
                        pass
                if spawn_time_obj is None:
                    print(f"‚ùå ‡∏Ç‡πâ‡∏≤‡∏° {name}: ‡πÄ‡∏ß‡∏•‡∏≤ '{next_time_str}' ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï")
                    continue

                # ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤:
                # ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å = ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ, ‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ (‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö) ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Üí +1 ‡∏ß‡∏±‡∏ô
                if last_time is not None and spawn_time_obj <= last_time:
                    current_date += timedelta(days=1)
                last_time = spawn_time_obj

                # ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô+‡πÄ‡∏ß‡∏•‡∏≤ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                spawn_dt = datetime.combine(current_date, spawn_time_obj).replace(tzinfo=tz)
                spawn_str = spawn_dt.strftime("%Y-%m-%d %H:%M")

                # ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
                cursor = await db.execute("SELECT 1 FROM bosses WHERE name = ?", (name,))
                exists = await cursor.fetchone()

                if exists:
                    await db.execute(
                        "UPDATE bosses SET next_spawn = ?, period = ?, occ = ?, name_th = ? WHERE name = ?",
                        (spawn_str, period_str, occ, name_th, name)
                    )
                    updated += 1
                else:
                    await db.execute(
                        "INSERT INTO bosses (name, name_th, next_spawn, period, occ) VALUES (?, ?, ?, ?, ?)",
                        (name, name_th, spawn_str, period_str, occ)
                    )
                    inserted += 1

            await db.commit()

        await message.channel.send(
            f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà {inserted} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï {updated} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
        )

    # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    await bot.process_commands(message)




# ---------- ADD BOSS ----------
@bot.tree.command(name="addboss", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏™‡πÉ‡∏´‡∏°‡πà")
@app_commands.describe(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™", period="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà (HH:MM)", locate="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", occ="‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î")
async def addboss(interaction: discord.Interaction, name: str, period: str, locate: str = "-", occ: str = "-"):
    try:
        datetime.strptime(period, "%H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO bosses (name, period, locate, occ) VALUES (?, ?, ?, ?)", (name, period, locate, occ))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏™ {name} ‡πÅ‡∏•‡πâ‡∏ß")

# ---------- LIST BOSSES ----------
@bot.tree.command(name="listboss", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def listboss(interaction: discord.Interaction):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT no, name, locate, period, next_spawn, occ FROM bosses ORDER BY no ASC") as cursor:
            rows = await cursor.fetchall()
    if not rows:
        await interaction.response.send_message("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    msg = "**üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**\n"
    for no, name, locate, period, next_spawn, occ in rows:
        msg += f"NO.{no}\t {name}\t {locate}\t ({period})\t {next_spawn}\t {occ}\n"
    await interaction.response.send_message(msg)

# ---------- DELETE BOSS ----------
@bot.tree.command(name="deleteboss", description="‡∏•‡∏ö‡∏ö‡∏≠‡∏™")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def deleteboss(interaction: discord.Interaction, boss_name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM bosses WHERE name = ?", (boss_name,))
        await db.commit()
    await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏≠‡∏™ {boss_name} ‡πÅ‡∏•‡πâ‡∏ß")

# ---------- EDIT BOSS ----------
@bot.tree.command(name="editboss", description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™")
@app_commands.describe(no="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏≠‡∏™", name="‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà", period="‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà (HH:MM)", locate="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà", occ="‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î")
async def editboss(interaction: discord.Interaction, no: int, name: str, period: str, locate: str, occ: str):
    try:
        datetime.strptime(period, "%H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET name = ?, period = ?, locate = ?, occ = ? WHERE no = ?", (name, period, locate, occ, no))
        await db.commit()
    await interaction.response.send_message(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏™‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {no} ‡πÄ‡∏õ‡πá‡∏ô {name} ({period}) ‡∏≠‡∏¢‡∏π‡πà {locate} ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏Å‡∏¥‡∏î {occ} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ---------- KILLNOW ----------
@bot.tree.command(name="killnow", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ï‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def killnow(interaction: discord.Interaction, boss_name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT no, period FROM bosses WHERE name = ?", (boss_name,))
        row = await cursor.fetchone()
    if not row:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏™‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ", ephemeral=True)
        return
    no, period_str = row
    period = datetime.strptime(period_str, "%H:%M")
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    next_spawn = now + timedelta(hours=period.hour, minutes=period.minute)
    spawn_str = next_spawn.strftime("%Y-%m-%d %H:%M")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET next_spawn = ? WHERE no = ?", (spawn_str, no))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡∏ö‡∏≠‡∏™ {boss_name} ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {spawn_str} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")

# ---------- KILLAT ----------
@bot.tree.command(name="killat", description="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ñ‡∏π‡∏Å‡∏Ü‡πà‡∏≤")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™", killed_time="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ñ‡∏π‡∏Å‡∏Ü‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 13:45)")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def killat(interaction: discord.Interaction, boss_name: str, killed_time: str):
    try:
        killed_time_obj = datetime.strptime(killed_time, "%H:%M").time()
    except ValueError:
        await interaction.response.send_message("‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT no, period FROM bosses WHERE name = ?", (boss_name,))
        row = await cursor.fetchone()
    if not row:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏™‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ", ephemeral=True)
        return
    no, period_str = row
    period = datetime.strptime(period_str, "%H:%M")
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    today_killed = datetime.combine(now.date(), killed_time_obj).replace(tzinfo=ZoneInfo("Asia/Bangkok"))

    if(today_killed > now):
        killed_datetime = today_killed - timedelta(days=1)
    else:
        killed_datetime = today_killed
    
    #if (now - killed_datetime).total_seconds() > 3600:
    #    killed_datetime += timedelta(days=1)
    print(killed_datetime)
    next_spawn = killed_datetime + timedelta(hours=period.hour, minutes=period.minute)
    spawn_str = next_spawn.strftime("%Y-%m-%d %H:%M")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET next_spawn = ? WHERE no = ?", (spawn_str, no))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™ {boss_name} ‡πÄ‡∏õ‡πá‡∏ô {spawn_str} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")



# ---------- Incoming ----------
@bot.tree.command(name="incoming", description="‡∏î‡∏π‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤")
async def incoming(interaction: discord.Interaction):
    await interaction.response.defer()  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ô
    now = datetime.now() + timedelta(hours=7)  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢

    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name, next_spawn, occ FROM bosses WHERE next_spawn IS NOT NULL")
        rows = await cursor.fetchall()

    upcoming = []
    past = []

    for name, next_spawn_str, occ in rows:
        try:
            next_spawn = datetime.strptime(next_spawn_str, "%Y-%m-%d %H:%M")
            if next_spawn >= now:
                upcoming.append((next_spawn, name, occ))
            else:
                past.append((next_spawn, name, occ))
        except Exception as e:
            print(f"‚ùå Error parsing next_spawn for {name}: {e}")

    upcoming.sort()
    past.sort()

    all_bosses = upcoming + past

    if not all_bosses:
        await interaction.followup.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ß‡∏•‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™‡πÉ‡∏î‡πÜ")
        return

    lines = []
    for spawn_time, name, occ in all_bosses:
        diff_min = int((spawn_time - now).total_seconds() // 60)
        if diff_min >= 0:
            lines.append(f"üïí **{name}** ‚Äì ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ {occ} ‡∏ü‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å {diff_min} ‡∏ô‡∏≤‡∏ó‡∏µ ({spawn_time.strftime('%H:%M')})")
        else:
            lines.append(f"‚è≥ **{name}** ‚Äì ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏°‡∏∑‡πà‡∏≠ {abs(diff_min)} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß ({spawn_time.strftime('%H:%M')})")

    message = "\n".join(lines)
    await interaction.followup.send(message)

    





# ---------- CHECK NOTIFICATIONS ----------
@tasks.loop(seconds=60)
async def check_spawn_notifications():
    await bot.wait_until_ready()
    channel = bot.get_channel(CHANNEL_ID)
    if not channel:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        return
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT name, name_th, locate, next_spawn, occ FROM bosses WHERE next_spawn IS NOT NULL") as cursor:
            rows = await cursor.fetchall()
    for name, name_th, locate, next_spawn_str, occ in rows:
        try:
            next_spawn_time = datetime.strptime(next_spawn_str, "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo("Asia/Bangkok"))
            diff = (next_spawn_time - now).total_seconds()
            if (240 < diff <= 300) or (0 < diff <= 120):
                now_str = now.strftime("%H:%M")
                await channel.send(f"‚è∞ {occ} ({now_str}) ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á **{name_th}({name})** (‡∏≠‡∏¢‡∏π‡πà {locate}) ‡πÅ‡∏•‡πâ‡∏ß! ‡∏≠‡∏µ‡∏Å {int(diff // 60) + 1} ‡∏ô‡∏≤‡∏ó‡∏µ({next_spawn_time.strftime('%H:%M')})")
        except Exception as e:
            print(f"‚ùå Error parsing spawn time: {e}")


server_on()

# ---------- RUN ----------
async def main():
    await init_db()
    await bot.start(TOKEN)

asyncio.run(main())
