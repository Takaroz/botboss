import os
import discord
from discord import app_commands
from discord.ext import commands, tasks
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

from myServer import server_on

# ---------- CONFIG ----------
TOKEN = os.getenv('TOKEN')  # <-- ‡πÉ‡∏™‡πà Token ‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
DB_PATH = "bosses.db"
CHANNEL_ID = 1377663275650515094  # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô channel id ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô

# ---------- BOT SETUP ----------
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="/", intents=intents)

# ---------- AUTOCOMPLETE ----------
async def boss_name_autocomplete(interaction: discord.Interaction, current: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT name FROM bosses WHERE name LIKE ?", (f"%{current}%",))
        names = [row[0] for row in await cursor.fetchall()]
    return [app_commands.Choice(name=name, value=name) for name in names]

# ---------- ON READY ----------
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Logged in as {bot.user}")
    check_spawn_notifications.start()

# ---------- CREATE TABLE ----------
async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS bosses (
                no INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                period TEXT NOT NULL,
                next_spawn TEXT,
                locate TEXT DEFAULT '-'
            )
        """)
        await db.executemany("""
            INSERT INTO bosses (name, period, locate) VALUES (?, ?, ?)
        """, [
            ("‡πÄ‡∏ä‡∏≠‡∏£‡πå‡∏ó‡∏π‡∏ö‡∏≤", "06:00", "-"),
            ("‡πÄ‡∏Ñ‡∏•‡∏ã‡∏≠‡∏™", "10:00", "-"),
            ("‡∏ö‡∏≤‡∏ã‡∏¥‡∏•‡∏≤", "04:00", "-"),
            ("‡πÄ‡∏ü‡∏•‡∏¥‡∏™", "03:00", "-"),
            ("‡∏ó‡∏≤‡∏•‡∏≤‡∏Ñ‡∏¥‡∏ô", "10:00", "-"),
            ("‡∏û‡∏±‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏î‡πå", "12:00", "-"),
            ("‡∏ã‡∏≤‡∏£‡πå‡∏Å‡πâ‡∏≤", "10:00", "-"),
            ("‡∏ó‡∏¥‡∏°‡∏¥‡∏ó‡∏£‡∏¥‡∏™", "08:00", "-"),
            ("‡∏™‡∏ï‡∏±‡∏ô", "07:00", "-"),
            ("‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡∏û‡∏±‡∏ô", "08:00", "-"),
            ("‡∏û‡∏±‡∏ô‡∏ô‡∏≤‡πÇ‡∏£‡∏î", "10:00", "-"),
            ("‡πÄ‡∏°‡∏î‡∏π‡∏ã‡πà‡∏≤", "10:00", "-"),
            ("‡πÄ‡∏ö‡∏£‡∏Å‡πâ‡∏≤", "06:00", "-"),
            ("‡∏°‡∏≤‡∏ó‡∏π‡∏£‡∏≤", "06:00", "-"),
            ("‡πÅ‡∏ö‡∏•‡πá‡∏Ñ‡∏•‡∏¥‡∏•‡∏•‡∏µ‡πà", "12:00", "-"),
            ("‡πÄ‡∏ö‡∏Æ‡∏µ‡∏°‡∏≠‡∏ò", "09:00", "-"),
            ("‡∏ã‡∏≤‡∏ö‡∏±‡∏ô", "12:00", "‡∏°‡∏î‡∏ä‡∏±‡πâ‡∏ô2"),
            ("‡∏£‡∏≤‡∏ä‡∏¥‡∏ô‡∏µ‡∏°‡∏î", "06:00", "‡∏°‡∏î‡∏ä‡∏±‡πâ‡∏ô3"),
            ("‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô", "08:00", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 3"),
            ("‡∏Ñ‡∏≤‡∏ó‡∏≤‡∏ô", "10:00", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 6"),
            ("‡∏Ñ‡∏≠‡∏£‡πå‡∏ã‡∏±‡∏™", "10:00", "‡∏Ñ‡∏£‡∏π‡∏°‡πà‡∏≤‡∏ä‡∏±‡πâ‡∏ô 7"),
        ])
        await db.commit()

# ---------- ADD BOSS ----------
@bot.tree.command(name="addboss", description="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏™‡πÉ‡∏´‡∏°‡πà")
@app_commands.describe(name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™", period="‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà (HH:MM)", locate="‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà")
async def addboss(interaction: discord.Interaction, name: str, period: str, locate: str = "-"):
    try:
        datetime.strptime(period, "%H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("INSERT INTO bosses (name, period, locate) VALUES (?, ?, ?)", (name, period, locate))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏≠‡∏™ {name} ‡πÅ‡∏•‡πâ‡∏ß")

# ---------- LIST BOSSES ----------
@bot.tree.command(name="listboss", description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def listboss(interaction: discord.Interaction):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT no, name, locate, period, next_spawn FROM bosses ORDER BY no ASC") as cursor:
            rows = await cursor.fetchall()
    if not rows:
        await interaction.response.send_message("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
        return
    msg = "**üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:**\n"
    for no, name, locate, period, next_spawn in rows:
        msg += f"NO.{no}\t {name}\t {locate}\t ({period})\t {next_spawn}\n"
    await interaction.response.send_message(msg)

# ---------- DELETE BOSS ----------
@bot.tree.command(name="deleteboss", description="‡∏•‡∏ö‡∏ö‡∏≠‡∏™")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def deleteboss(interaction: discord.Interaction, boss_name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM bosses WHERE name = ?", (boss_name,))
        await db.commit()
    await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏≠‡∏™ {boss_name} ‡πÅ‡∏•‡πâ‡∏ß")

# ---------- EDIT BOSS ----------
@bot.tree.command(name="editboss", description="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™")
@app_commands.describe(no="‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ö‡∏≠‡∏™", name="‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà", period="‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà (HH:MM)")
async def editboss(interaction: discord.Interaction, no: int, name: str, period: str):
    try:
        datetime.strptime(period, "%H:%M")
    except ValueError:
        await interaction.response.send_message("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô HH:MM)", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET name = ?, period = ? WHERE no = ?", (name, period, no))
        await db.commit()
    await interaction.response.send_message(f"‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏≠‡∏™‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç {no} ‡πÄ‡∏õ‡πá‡∏ô {name} ({period}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

# ---------- KILLNOW ----------
@bot.tree.command(name="killnow", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ï‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def killnow(interaction: discord.Interaction, boss_name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT no, period FROM bosses WHERE name = ?", (boss_name,))
        row = await cursor.fetchone()
    if not row:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏™‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ", ephemeral=True)
        return
    no, period_str = row
    period = datetime.strptime(period_str, "%H:%M")
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    next_spawn = now + timedelta(hours=period.hour, minutes=period.minute)
    spawn_str = next_spawn.strftime("%Y-%m-%d %H:%M")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET next_spawn = ? WHERE no = ?", (spawn_str, no))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡∏ö‡∏≠‡∏™ {boss_name} ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {spawn_str} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")

# ---------- KILLAT ----------
@bot.tree.command(name="killat", description="‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ñ‡∏π‡∏Å‡∏Ü‡πà‡∏≤")
@app_commands.describe(boss_name="‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™", killed_time="‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏™‡∏ñ‡∏π‡∏Å‡∏Ü‡πà‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô 13:45)")
@app_commands.autocomplete(boss_name=boss_name_autocomplete)
async def killat(interaction: discord.Interaction, boss_name: str, killed_time: str):
    try:
        killed_time_obj = datetime.strptime(killed_time, "%H:%M").time()
    except ValueError:
        await interaction.response.send_message("‚ùå ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM", ephemeral=True)
        return
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute("SELECT no, period FROM bosses WHERE name = ?", (boss_name,))
        row = await cursor.fetchone()
    if not row:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏™‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏µ‡πâ", ephemeral=True)
        return
    no, period_str = row
    period = datetime.strptime(period_str, "%H:%M")
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    killed_datetime = datetime.combine(now.date(), killed_time_obj).replace(tzinfo=ZoneInfo("Asia/Bangkok"))
    if (now - killed_datetime).total_seconds() > 3600:
        killed_datetime += timedelta(days=1)
    next_spawn = killed_datetime + timedelta(hours=period.hour, minutes=period.minute)
    spawn_str = next_spawn.strftime("%Y-%m-%d %H:%M")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("UPDATE bosses SET next_spawn = ? WHERE no = ?", (spawn_str, no))
        await db.commit()
    await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ü‡∏∑‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏™ {boss_name} ‡πÄ‡∏õ‡πá‡∏ô {spawn_str} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)")

# ---------- CHECK NOTIFICATIONS ----------
@tasks.loop(seconds=180)
async def check_spawn_notifications():
    await bot.wait_until_ready()
    channel = bot.get_channel(CHANNEL_ID)
    if not channel:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        return
    now = datetime.now(ZoneInfo("Asia/Bangkok"))
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("SELECT name, locate, next_spawn FROM bosses WHERE next_spawn IS NOT NULL") as cursor:
            rows = await cursor.fetchall()
    for name, locate, next_spawn_str in rows:
        try:
            next_spawn_time = datetime.strptime(next_spawn_str, "%Y-%m-%d %H:%M").replace(tzinfo=ZoneInfo("Asia/Bangkok"))
            diff = (next_spawn_time - now).total_seconds()
            if 0 < diff <= 600:
                await channel.send(f"‚è∞ ‡πÉ‡∏Å‡∏•‡πâ‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á **{name}** (‡∏≠‡∏¢‡∏π‡πà {locate}) ‡πÅ‡∏•‡πâ‡∏ß! ‡∏≠‡∏µ‡∏Å {int(diff // 60)} ‡∏ô‡∏≤‡∏ó‡∏µ")
        except Exception as e:
            print(f"‚ùå Error parsing spawn time: {e}")


server_on()

# ---------- RUN ----------
async def main():
    await init_db()
    await bot.start(TOKEN)

asyncio.run(main())
